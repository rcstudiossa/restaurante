package br.com.restaurante.faces;import java.util.ArrayList;import java.util.List;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.faces.bean.ManagedBean;import javax.faces.bean.ViewScoped;import javax.faces.model.SelectItem;import br.com.restaurante.business.ComboBS;import br.com.restaurante.business.CrudBS;import br.com.restaurante.business.FuncaoBS;import br.com.restaurante.business.FuncaoOrigemBS;import br.com.restaurante.business.MenuBS;import br.com.restaurante.business.MenuFuncaoOrigemBS;import br.com.restaurante.business.OrigemBS;import br.com.restaurante.business.PermissaoFuncaoOrigemBS;import br.com.restaurante.business.UsuarioBS;import br.com.restaurante.business.UsuarioFuncaoBS;import br.com.restaurante.model.FuncaoModel;import br.com.restaurante.model.FuncaoOrigemModel;import br.com.restaurante.model.MenuFuncaoOrigemModel;import br.com.restaurante.model.MenuModel;import br.com.restaurante.model.OrigemModel;import br.com.restaurante.model.PermissaoFuncaoOrigemModel;import br.com.restaurante.model.PermissaoModel;import br.com.restaurante.model.UsuarioFuncaoModel;import br.com.restaurante.model.UsuarioModel;import br.com.restaurante.util.Utilitario;import br.com.topsys.exception.TSApplicationException;import br.com.topsys.util.TSUtil;@ViewScoped@SuppressWarnings("serial")@ManagedBean(name = "funcaoFaces")public final class FuncaoFaces extends CrudFaces<FuncaoModel> {	@EJB	private FuncaoBS funcaoBS;		@EJB	private FuncaoOrigemBS funcaoOrigemBS;		@EJB	private UsuarioFuncaoBS usuarioFuncaoBS;		@EJB	private OrigemBS origemBS;		@EJB	private MenuBS menuBS;		@EJB	private UsuarioBS usuarioBS;		@EJB	private MenuFuncaoOrigemBS menuFuncaoOrigemBS;		@EJB	private PermissaoFuncaoOrigemBS permissaoFuncaoOrigemBS;		@EJB	private ComboBS comboBS;	private OrigemModel origemModel;	private UsuarioModel usuarioModel;	private MenuModel menuModel;	private PermissaoModel permissaoModel;	private FuncaoOrigemModel funcaoOrigemSelecionada;	private UsuarioFuncaoModel usuarioFuncaoSelecionada;	private MenuFuncaoOrigemModel menuFuncaoOrigemSelecionada;	private PermissaoFuncaoOrigemModel permissaoFuncaoOrigemSelecionada;	private List<SelectItem> comboOrigens;	private List<SelectItem> comboMenus;	private List<SelectItem> comboUsuarios;	private List<SelectItem> comboPermissoes;		@Override	@PostConstruct	protected void clearFields() {		this.crudModel = new FuncaoModel();		this.crudModel.setFuncaoOrigens(new ArrayList<FuncaoOrigemModel>());		this.crudModel.setFlagAtivo(true);		this.crudModel.setFlagPermissaoLogin(true);		this.crudModel.setUsuarioCadastroModel(Utilitario.getUsuarioLogado());		this.crudModel.setMenuInicial(new MenuModel());		this.crudModel.getMenuInicial().setMenuModel(new MenuModel());		this.crudPesquisaModel = new FuncaoModel();		this.crudPesquisaModel.setFuncaoOrigens(new ArrayList<FuncaoOrigemModel>());		this.crudPesquisaModel.setFlagAtivo(true);		this.initCombos();		this.origemModel = new OrigemModel();		this.usuarioModel = new UsuarioModel();		this.menuModel = new MenuModel();		this.permissaoModel = new PermissaoModel();			}	private void initCombos() {		this.comboOrigens = super.initCombo(this.origemBS.pesquisarCrudModel(new OrigemModel(true)), "id", "descricao");		this.comboMenus = super.initCombo(this.menuBS.pesquisarCombo(), "id", "descricao");		this.comboUsuarios = super.initCombo(this.comboBS.pesquisarUsuarios(), "id", "nome");		this.comboPermissoes = super.initCombo(this.comboBS.pesquisarPermissoes(), "id", "descricao");			}	public String addOrigem() {		if (TSUtil.isEmpty(this.origemModel.getId())) {			super.addErrorMessage("Origem: Campo obrigatório");			return null;		}		FuncaoOrigemModel funcaoOrigemModel = new FuncaoOrigemModel();		funcaoOrigemModel.setFuncaoModel(this.crudModel);		funcaoOrigemModel.setOrigemModel(this.origemBS.obterCrudModel(this.origemModel));		funcaoOrigemModel.setMenus(new ArrayList<MenuFuncaoOrigemModel>());		funcaoOrigemModel.setPermissoes(new ArrayList<PermissaoFuncaoOrigemModel>());		funcaoOrigemModel.setUsuarios(new ArrayList<UsuarioFuncaoModel>());		if (this.crudModel.getFuncaoOrigens().contains(funcaoOrigemModel)) {			super.addErrorMessage("Origem já adicionada anteriormente");			return null;		}		this.crudModel.getFuncaoOrigens().add(funcaoOrigemModel);		return null;	}	public String addUsuario() {		if (TSUtil.isEmpty(this.usuarioModel.getId())) {			super.addErrorMessage("Usuário: Campo obrigatório");			return null;		}		UsuarioFuncaoModel usuarioFuncaoModel = new UsuarioFuncaoModel();		usuarioFuncaoModel.setFuncaoModel(this.crudModel);		usuarioFuncaoModel.setOrigemModel(this.origemBS.obterCrudModel(this.funcaoOrigemSelecionada.getOrigemModel()));		usuarioFuncaoModel.setUsuarioModel(this.usuarioBS.obterCrudModel(this.usuarioModel));		usuarioFuncaoModel.setFlagAtivo(Boolean.TRUE);		if (this.funcaoOrigemSelecionada.getUsuarios().contains(usuarioFuncaoModel)) {			super.addErrorMessage("Usuário já adicionado anteriormente");			return null;		}		this.funcaoOrigemSelecionada.getUsuarios().add(usuarioFuncaoModel);		return null;	}	public String addMenu() {		if (TSUtil.isEmpty(this.menuModel.getId())) {			super.addErrorMessage("Menu: Campo obrigatório");			return null;		}		MenuFuncaoOrigemModel menuFuncaoOrigemModel = new MenuFuncaoOrigemModel();		menuFuncaoOrigemModel.setFuncaoOrigemModel(this.funcaoOrigemSelecionada);		menuFuncaoOrigemModel.setMenuModel(this.menuBS.obter(this.menuModel));		if (this.funcaoOrigemSelecionada.getMenus().contains(menuFuncaoOrigemModel)) {			super.addErrorMessage("Menu já adicionado anteriormente");			return null;		}		this.funcaoOrigemSelecionada.getMenus().add(menuFuncaoOrigemModel);		return null;	}	public String addPermissao() {		if (TSUtil.isEmpty(this.permissaoModel.getId())) {			super.addErrorMessage("Permissão: Campo obrigatório");			return null;		}		PermissaoFuncaoOrigemModel permissaoFuncaoOrigemModel = new PermissaoFuncaoOrigemModel();		permissaoFuncaoOrigemModel.setFuncaoOrigemModel(this.funcaoOrigemSelecionada);		permissaoFuncaoOrigemModel.setPermissaoModel(this.comboBS.obter(this.permissaoModel));		if (this.funcaoOrigemSelecionada.getPermissoes().contains(permissaoFuncaoOrigemModel)) {			super.addErrorMessage("Permissão já adicionada anteriormente");			return null;		}		this.funcaoOrigemSelecionada.getPermissoes().add(permissaoFuncaoOrigemModel);		return null;	}		public String delOrigem() {		if (!TSUtil.isEmpty(this.funcaoOrigemSelecionada.getId())) {			try {				this.funcaoOrigemBS.excluir(this.funcaoOrigemSelecionada);				super.addInfoMessage("Operação realizada com sucesso");			} catch (TSApplicationException e) {				super.throwException(e);			}		}		this.crudModel.getFuncaoOrigens().remove(this.funcaoOrigemSelecionada);		return null;	}	public String delUsuario() {		if (!TSUtil.isEmpty(this.usuarioFuncaoSelecionada.getId())) {			try {				this.usuarioFuncaoBS.excluir(this.usuarioFuncaoSelecionada);				super.addInfoMessage("Operação realizada com sucesso");			} catch (TSApplicationException e) {				super.throwException(e);			}					}		this.funcaoOrigemSelecionada.getUsuarios().remove(this.usuarioFuncaoSelecionada);		return null;	}	public String delMenu() {		if (!TSUtil.isEmpty(this.menuFuncaoOrigemSelecionada.getId())) {			try {				this.menuFuncaoOrigemBS.excluir(this.menuFuncaoOrigemSelecionada);				super.addInfoMessage("Operação realizada com sucesso");			} catch (TSApplicationException e) {				super.throwException(e);			}		}		this.funcaoOrigemSelecionada.getMenus().remove(this.menuFuncaoOrigemSelecionada);		return null;	}	public String delPermissao() {		if (!TSUtil.isEmpty(this.permissaoFuncaoOrigemSelecionada.getId())) {			try {				this.permissaoFuncaoOrigemBS.excluir(this.permissaoFuncaoOrigemSelecionada);				super.addInfoMessage("Operação realizada com sucesso");			} catch (TSApplicationException e) {				super.throwException(e);			}		}		this.funcaoOrigemSelecionada.getPermissoes().remove(this.permissaoFuncaoOrigemSelecionada);		return null;	}		@Override	protected void tratarClone() {				for (FuncaoOrigemModel funcaoOrigem : this.crudModel.getFuncaoOrigens()) {						funcaoOrigem.setId(null);			funcaoOrigem.setFuncaoModel(this.crudModel);						for (MenuFuncaoOrigemModel menu : funcaoOrigem.getMenus()) {				menu.setId(null);				menu.setFuncaoOrigemModel(funcaoOrigem);			}						for (PermissaoFuncaoOrigemModel permissao : funcaoOrigem.getPermissoes()) {				permissao.setId(null);				permissao.setFuncaoOrigemModel(funcaoOrigem);			}						for (UsuarioFuncaoModel usuario : funcaoOrigem.getUsuarios()) {				usuario.setId(null);				usuario.setFuncaoModel(this.crudModel);				usuario.setOrigemModel(funcaoOrigem.getOrigemModel());			}					}			}		@Override	protected void preDelete() {		this.crudModel.setUsuarioAtualizacaoModel(Utilitario.getUsuarioLogado());	}	@Override	protected CrudBS<FuncaoModel> getCrudBS() {		return this.funcaoBS;	}	public FuncaoOrigemModel getFuncaoOrigemSelecionada() {		return funcaoOrigemSelecionada;	}	public void setFuncaoOrigemSelecionada(FuncaoOrigemModel funcaoOrigemSelecionada) {		this.funcaoOrigemSelecionada = funcaoOrigemSelecionada;	}	public List<SelectItem> getComboOrigens() {		return comboOrigens;	}	public void setComboOrigens(List<SelectItem> comboOrigens) {		this.comboOrigens = comboOrigens;	}	public List<SelectItem> getComboMenus() {		return comboMenus;	}	public void setComboMenus(List<SelectItem> comboMenus) {		this.comboMenus = comboMenus;	}	public OrigemModel getOrigemModel() {		return origemModel;	}	public void setOrigemModel(OrigemModel origemModel) {		this.origemModel = origemModel;	}	public UsuarioModel getUsuarioModel() {		return usuarioModel;	}	public void setUsuarioModel(UsuarioModel usuarioModel) {		this.usuarioModel = usuarioModel;	}	public List<SelectItem> getComboUsuarios() {		return comboUsuarios;	}	public void setComboUsuarios(List<SelectItem> comboUsuarios) {		this.comboUsuarios = comboUsuarios;	}	public UsuarioFuncaoModel getUsuarioFuncaoSelecionada() {		return usuarioFuncaoSelecionada;	}	public void setUsuarioFuncaoSelecionada(UsuarioFuncaoModel usuarioFuncaoSelecionada) {		this.usuarioFuncaoSelecionada = usuarioFuncaoSelecionada;	}	public MenuModel getMenuModel() {		return menuModel;	}	public void setMenuModel(MenuModel menuModel) {		this.menuModel = menuModel;	}	public MenuFuncaoOrigemModel getMenuFuncaoOrigemSelecionada() {		return menuFuncaoOrigemSelecionada;	}	public void setMenuFuncaoOrigemSelecionada(MenuFuncaoOrigemModel menuFuncaoOrigemSelecionada) {		this.menuFuncaoOrigemSelecionada = menuFuncaoOrigemSelecionada;	}	public PermissaoModel getPermissaoModel() {		return permissaoModel;	}	public void setPermissaoModel(PermissaoModel permissaoModel) {		this.permissaoModel = permissaoModel;	}	public PermissaoFuncaoOrigemModel getPermissaoFuncaoOrigemSelecionada() {		return permissaoFuncaoOrigemSelecionada;	}	public void setPermissaoFuncaoOrigemSelecionada(PermissaoFuncaoOrigemModel permissaoFuncaoOrigemSelecionada) {		this.permissaoFuncaoOrigemSelecionada = permissaoFuncaoOrigemSelecionada;	}	public List<SelectItem> getComboPermissoes() {		return comboPermissoes;	}	public void setComboPermissoes(List<SelectItem> comboPermissoes) {		this.comboPermissoes = comboPermissoes;	}}