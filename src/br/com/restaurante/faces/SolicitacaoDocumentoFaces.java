package br.com.restaurante.faces;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.faces.bean.ManagedBean;import javax.faces.bean.ViewScoped;import org.primefaces.context.RequestContext;import br.com.restaurante.business.ConfiguracaoBS;import br.com.restaurante.business.CrudBS;import br.com.restaurante.business.QuizQuestionarioBS;import br.com.restaurante.business.SolicitacaoDocumentoBS;import br.com.restaurante.business.TipoQuizBS;import br.com.restaurante.business.TipoSolicitacaoDocumentoBS;import br.com.restaurante.business.ValidadorBS;import br.com.restaurante.model.AtendimentoModel;import br.com.restaurante.model.CamposRespostaAb;import br.com.restaurante.model.QuizGrupoModel;import br.com.restaurante.model.QuizModel;import br.com.restaurante.model.QuizQuestionarioArquetipoRespostaModel;import br.com.restaurante.model.QuizQuestionarioModel;import br.com.restaurante.model.QuizQuestionarioRespostaModel;import br.com.restaurante.model.SolicitacaoDocumentoModel;import br.com.restaurante.model.TipoSolicitacaoDocumentoModel;import br.com.restaurante.util.JasperUtil;import br.com.restaurante.util.QuizTemplateUtil;import br.com.restaurante.util.QuizUtil;import br.com.restaurante.util.Utilitario;import br.com.topsys.exception.TSApplicationException;import br.com.topsys.util.TSUtil;import br.com.topsys.web.util.TSFacesUtil;@ViewScoped@SuppressWarnings("serial")@ManagedBean(name = "solicitacaoDocumentoFaces")public final class SolicitacaoDocumentoFaces extends CrudFaces<SolicitacaoDocumentoModel> implements QuizQuestionarioFacesIF, QuestionarioFacesIF {	@EJB	private SolicitacaoDocumentoBS solicitacaoDocumentoBS;	@EJB	private ConfiguracaoBS configuracaoBS;	@EJB	private TipoSolicitacaoDocumentoBS tipoSolicitacaoDocumentoBS;	@EJB	private QuizQuestionarioBS quizQuestionarioBS;	@EJB	private TipoQuizBS tipoQuizBS;	@EJB	private ValidadorBS validadorBS;	private List<TipoSolicitacaoDocumentoModel> tiposSolicitacoesDocumentos;	private QuizTemplateUtil<QuizQuestionarioModel, QuizQuestionarioRespostaModel, QuizQuestionarioArquetipoRespostaModel> quizTemplateUtil;	private QuizUtil quizUtil;	@Override	@PostConstruct	protected void clearFields() {		this.quizTemplateUtil = new QuizTemplateUtil<QuizQuestionarioModel, QuizQuestionarioRespostaModel, QuizQuestionarioArquetipoRespostaModel>();		this.quizUtil = new QuizUtil();		this.grid = this.solicitacaoDocumentoBS.pesquisarCrudModel(new SolicitacaoDocumentoModel(Utilitario.getAtendimentoSessao()));		if (!TSUtil.isEmpty(this.grid)) {			this.crudModel = this.grid.get(0);			if (!TSUtil.isEmpty(this.crudModel.getTipoSolicitacaoDocumentoModel().getTipoQuizModel().getId())) {				this.crudModel.setQuizQuestionarioModel(this.quizQuestionarioBS.obterQuiz(this.crudModel.getQuizQuestionarioModel()));			}		} else {			this.grid = new ArrayList<SolicitacaoDocumentoModel>();			this.crudModel = new SolicitacaoDocumentoModel(Utilitario.getAtendimentoSessao());			this.crudModel.setUsuarioCadastroModel(Utilitario.getUsuarioLogado());			this.crudModel.setTipoSolicitacaoDocumentoModel(new TipoSolicitacaoDocumentoModel());			this.crudModel.setFlagAtivo(Boolean.TRUE);			this.crudModel.setFlagConcluido(false);		}		super.setManterCampos(true);		this.tiposSolicitacoesDocumentos = this.tipoSolicitacaoDocumentoBS.pesquisar(Utilitario.getUsuarioLogado().getFuncaoLogada());	}	@Override	protected boolean validaCampos() {		boolean valida = true;		RequestContext.getCurrentInstance().addCallbackParam("valido", valida);		return valida;	}	public String processarCampo(QuizModel quiz) {		Map<String, String> mensagensValidacao = this.quizUtil.processarCampo(quiz, this.crudModel.getQuizQuestionarioModel().getQuizGrupos(), false);		Utilitario.tratarMensagensValidacaoQuiz(mensagensValidacao, null);		return null;	}	private boolean validaCamposQuizQuestionario() {		boolean valida = true;		Map<String, String> mensagensValidacao = new HashMap<String, String>();		for (QuizGrupoModel grupo : this.crudModel.getQuizQuestionarioModel().getQuizGrupos()) {			for (QuizModel quiz : grupo.getQuizes()) {				if (quiz.getQuizPerguntaModel().isNumerico()) {					String msg = this.quizUtil.validarInteiro(quiz);					if (!TSUtil.isEmpty(msg)) {						super.addErrorMessage(msg);						valida = false;					}				} else if (quiz.getQuizPerguntaModel().isPontoFlutuante()) {					String msg = this.quizUtil.validarPontoFlutuante(quiz);					if (!TSUtil.isEmpty(msg)) {						super.addErrorMessage(msg);						valida = false;					}				}				if (quiz.isPossuiResposta()) {					mensagensValidacao.putAll(this.quizUtil.validar(quiz, true));				} else if (quiz.getFlagObrigatorio()) {					valida = false;					super.addErrorMessage((TSUtil.isEmpty(quiz.getApelido()) ? (TSUtil.isEmpty(quiz.getQuizPerguntaModel().getApelido()) ? quiz.getQuizPerguntaModel().getPergunta() : quiz.getQuizPerguntaModel().getApelido()) : quiz.getApelido()) + ": Campo obrigatório");				} else {					mensagensValidacao.putAll(this.quizUtil.validar(quiz, true));				}			}		}		valida = Utilitario.tratarMensagensValidacaoQuiz(mensagensValidacao, null) && valida;		RequestContext.getCurrentInstance().addCallbackParam("valido", valida);		return valida;	}	public void atualizarDocumento() {		if (!TSUtil.isEmpty(this.crudModel.getTipoSolicitacaoDocumentoModel().getTipoQuizModel().getId())) {			if (TSUtil.isEmpty(this.crudModel.getQuizQuestionarioModel().getId())) {				if (TSUtil.isEmpty(this.crudModel.getQuizQuestionarioModel().getQuizGrupos())) {					this.quizQuestionarioBS.iniciarQuiz(this.crudModel.getQuizQuestionarioModel());				}			} else {				this.crudModel.setQuizQuestionarioModel(this.quizQuestionarioBS.obterQuiz(this.crudModel.getQuizQuestionarioModel()));			}		}	}	public void cancelarSolicitacaoDocumento() throws TSApplicationException {		if (TSUtil.isEmpty(this.crudModel.getId())) {			this.clearFields();		} else {			this.preUpdate();			this.solicitacaoDocumentoBS.cancelarSolicitacaoDocumento(this.crudModel);			this.clearFields();		}	}	private SolicitacaoDocumentoModel getSolicitacaoDocumentoModelInstance(TipoSolicitacaoDocumentoModel tipoSolicitacaoDocumentoModel) {		SolicitacaoDocumentoModel solicitacaoDocumentoModel = new SolicitacaoDocumentoModel(Utilitario.getAtendimentoSessao());		solicitacaoDocumentoModel.setUsuarioCadastroModel(Utilitario.getUsuarioLogado());		solicitacaoDocumentoModel.setFuncaoModel(Utilitario.getUsuarioLogado().getFuncaoLogada());		solicitacaoDocumentoModel.setDataCadastro(new Date());		solicitacaoDocumentoModel.setFlagAtivo(Boolean.TRUE);		solicitacaoDocumentoModel.setFlagConcluido(Boolean.FALSE);		solicitacaoDocumentoModel.setTipoSolicitacaoDocumentoModel(this.tipoSolicitacaoDocumentoBS.obterCrudModel(tipoSolicitacaoDocumentoModel));		solicitacaoDocumentoModel.setAtendimentoModel(Utilitario.getAtendimentoSessao());		solicitacaoDocumentoModel.setQuizQuestionarioModel(new QuizQuestionarioModel());		if (!TSUtil.isEmpty(solicitacaoDocumentoModel.getTipoSolicitacaoDocumentoModel().getTipoQuizModel().getId())) {			solicitacaoDocumentoModel.getQuizQuestionarioModel().setTipoQuizModel(solicitacaoDocumentoModel.getTipoSolicitacaoDocumentoModel().getTipoQuizModel());			solicitacaoDocumentoModel.getQuizQuestionarioModel().setAtendimentoModel(Utilitario.getAtendimentoSessao());			solicitacaoDocumentoModel.setFlagConcluido(false);			this.quizQuestionarioBS.iniciarQuiz(solicitacaoDocumentoModel.getQuizQuestionarioModel());		}		return solicitacaoDocumentoModel;	}	@Override	protected String insert() throws TSApplicationException {		if (!TSUtil.isEmpty(this.crudModel.getTipoSolicitacaoDocumentoModel().getTipoQuizModel().getId())) {			super.setDefaultMessage(false);			super.setClearFields(false);			if (!this.validaCamposQuizQuestionario()) {				return null;			}			this.crudModel.getQuizQuestionarioModel().setDataCadastro(new Date());			this.crudModel.getQuizQuestionarioModel().setUsuarioCadastroModel(Utilitario.getUsuarioLogado());			this.crudModel.getQuizQuestionarioModel().setFuncaoModel(Utilitario.getUsuarioLogado().getFuncaoLogada());			this.quizTemplateUtil.atualizarValoresCamposCalculaveis(this.crudModel.getQuizQuestionarioModel());			this.quizQuestionarioBS.inserirQuiz(this.crudModel.getQuizQuestionarioModel());			super.setDefaultMessage(true);			super.setClearFields(true);		}		return super.insert();	}	@Override	protected String update() throws TSApplicationException {		if (!TSUtil.isEmpty(this.crudModel.getTipoSolicitacaoDocumentoModel().getTipoQuizModel().getId())) {			super.setDefaultMessage(false);			super.setClearFields(false);			if (!this.validaCamposQuizQuestionario()) {				return null;			}			this.crudModel.getQuizQuestionarioModel().setDataCadastro(new Date());			this.crudModel.getQuizQuestionarioModel().setUsuarioCadastroModel(Utilitario.getUsuarioLogado());			this.crudModel.getQuizQuestionarioModel().setFuncaoModel(Utilitario.getUsuarioLogado().getFuncaoLogada());			this.quizTemplateUtil.atualizarValoresCamposCalculaveis(this.crudModel.getQuizQuestionarioModel());			this.quizQuestionarioBS.alterarQuiz(this.crudModel.getQuizQuestionarioModel());			super.setDefaultMessage(true);			super.setClearFields(true);		}		return super.update();	}	public String criar() {		return null;	}	public String copiar() {		if (!this.grid.isEmpty() && TSUtil.isEmpty(this.grid.get(0).getId())) {			super.addErrorMessage("Já existe uma solicitação de documento em aberto.");			return null;		}		SolicitacaoDocumentoModel documento = this.getSolicitacaoDocumentoModelInstance(this.crudModel.getTipoSolicitacaoDocumentoModel());		documento.setTexto(this.crudModel.getTexto());		if (!TSUtil.isEmpty(documento.getTipoSolicitacaoDocumentoModel().getTipoQuizModel().getId())) {			documento.getQuizQuestionarioModel().setAtendimentoModel(Utilitario.getAtendimentoSessao());			documento.getQuizQuestionarioModel().setUsuarioCadastroModel(Utilitario.getUsuarioLogado());			documento.setFlagConcluido(false);			QuizQuestionarioRespostaModel resposta = null;			for (QuizQuestionarioRespostaModel respostaAntiga : this.crudModel.getQuizQuestionarioModel().getRespostas()) {				resposta = new QuizQuestionarioRespostaModel();				resposta.setQuizModel(respostaAntiga.getQuizModel());				resposta.getQuizModel().setRespostaEscolhida(null);				resposta.getQuizModel().setRespostasEscolhidas(new ArrayList<String>());				resposta.setQuizTemplate(documento.getQuizQuestionarioModel());				documento.getQuizQuestionarioModel().getRespostas().add(resposta);			}			QuizQuestionarioModel quizCopia = this.quizQuestionarioBS.obterQuiz(this.crudModel.getQuizQuestionarioModel());			documento.getQuizQuestionarioModel().setTipoQuizModel(quizCopia.getTipoQuizModel());			documento.getQuizQuestionarioModel().setQuizGrupos(quizCopia.getQuizGrupos());		}		this.grid.add(0, documento);		this.crudModel = this.grid.get(0);		return null;	}	public void addSolicitacaoDocumento(TipoSolicitacaoDocumentoModel model) {		if (!this.grid.isEmpty() && TSUtil.isEmpty(this.grid.get(0).getId())) {			super.addErrorMessage("Já existe uma solicitação de documento em aberto.");			return;		}		if (!TSUtil.isEmpty(model) && !TSUtil.isEmpty(TSUtil.tratarLong(model.getId()))) {			this.grid.add(0, getSolicitacaoDocumentoModelInstance(model));			this.crudModel = this.grid.get(0);			this.crudModel.setTexto(this.tipoSolicitacaoDocumentoBS.getReferenciaComReplace(model, Utilitario.getAtendimentoSessao().getId()));		} else {			super.addErrorMessage("Selecione um tipo de documento");		}	}	public String concluir() {		this.crudModel.setFlagConcluido(true);		super.updateEvent();		Boolean valido = (Boolean) RequestContext.getCurrentInstance().getCallbackParams().get("valido");		if (valido) {			AtendimentoFaces pepFaces = (AtendimentoFaces) TSFacesUtil.getManagedBean("atendimentoFaces");			if (pepFaces.isImpressaoAutomaticaPulaTab()) {				this.imprimir();			}		}		return null;	}	public String imprimir() {		try {			Map<String, Object> parametros = new HashMap<String, Object>();			parametros.put("SOLICITACAO_DOCUMENTO_ID", this.crudModel.getId());			parametros.put("SUBREPORT_DIR", Utilitario.obterPastaRelatorio());			JasperUtil jasperUtil = new JasperUtil();			if (!TSUtil.isEmpty(this.crudModel.getTipoSolicitacaoDocumentoModel().getTipoQuizModel().getId())) {				parametros.put("ID", this.crudModel.getQuizQuestionarioModel().getId());				this.crudModel.getTipoSolicitacaoDocumentoModel().setTipoQuizModel(this.tipoQuizBS.obterCrudModel(this.crudModel.getTipoSolicitacaoDocumentoModel().getTipoQuizModel()));				jasperUtil.gerarRelatorio("quizQuestionario.jasper", parametros);			} else {				jasperUtil.gerarRelatorio("templateSolicitacaoDocumento.jasper", parametros);			}		} catch (Exception ex) {			this.addErrorMessage("Erro ao imprimir solicitação de documento, contate o administrador do sistema");			ex.printStackTrace();		}		return null;	}	public String converterUnidade(CamposRespostaAb quiz) {		quiz.setDoubleEscolhido(this.quizUtil.obterValorConvertido(quiz));		quiz.popularReferenciaPontoFlutuante();		quiz.setUnidadeAnterior(quiz.getUnidade());		return null;	}	@Override	public String addInputText(QuizModel quiz) {		if (TSUtil.isEmpty(quiz.getRespostaEscolhida())) {			super.addErrorMessage(quiz.getApelido() + ": Campo obrigatório");			return null;		}		if (quiz.getRespostasEscolhidas() == null) {			quiz.setRespostasEscolhidas(new ArrayList<String>());		}		quiz.getRespostasEscolhidas().add(quiz.getRespostaEscolhida());		quiz.setRespostaEscolhida(null);		return null;	}	@Override	public String removeInputText(QuizModel quiz, String inputText) {		quiz.getRespostasEscolhidas().remove(inputText);		return null;	}	@Override	public String subir(QuizModel quiz, String resposta) {		Utilitario.ordenarListaPraCima(quiz.getRespostasEscolhidas(), resposta);		return null;	}	@Override	public String descer(QuizModel quiz, String resposta) {		Utilitario.ordenarListaPraBaixo(quiz.getRespostasEscolhidas(), resposta);		return null;	}	public String excluir(SolicitacaoDocumentoModel model) {		try {			this.cancelarSolicitacaoDocumento();		} catch (TSApplicationException e) {			super.throwException(e);		}		return null;	}	@Override	protected CrudBS<SolicitacaoDocumentoModel> getCrudBS() {		return solicitacaoDocumentoBS;	}	public boolean isPermissao() {		AtendimentoModel atendimento = Utilitario.getAtendimentoSessao();		return !TSUtil.isEmpty(atendimento) && atendimento.getId().equals(this.crudModel.getAtendimentoModel().getId());	}	public List<TipoSolicitacaoDocumentoModel> getTiposSolicitacoesDocumentos() {		return tiposSolicitacoesDocumentos;	}	public void setTiposSolicitacoesDocumentos(List<TipoSolicitacaoDocumentoModel> tiposSolicitacoesDocumentos) {		this.tiposSolicitacoesDocumentos = tiposSolicitacoesDocumentos;	}}