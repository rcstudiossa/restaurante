package br.com.restaurante.faces;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.faces.bean.ManagedBean;import javax.faces.bean.ViewScoped;import javax.faces.model.SelectItem;import br.com.restaurante.business.ComboBS;import br.com.restaurante.business.CrudBS;import br.com.restaurante.business.FuncaoBS;import br.com.restaurante.business.OrigemBS;import br.com.restaurante.business.UsuarioBS;import br.com.restaurante.business.UsuarioFuncaoBS;import br.com.restaurante.model.BairroModel;import br.com.restaurante.model.CidadeModel;import br.com.restaurante.model.EstadoModel;import br.com.restaurante.model.FuncaoModel;import br.com.restaurante.model.OrigemModel;import br.com.restaurante.model.SetorModel;import br.com.restaurante.model.UsuarioFuncaoModel;import br.com.restaurante.model.UsuarioModel;import br.com.restaurante.util.Constantes;import br.com.restaurante.util.Utilitario;import br.com.topsys.exception.TSApplicationException;import br.com.topsys.util.TSCryptoUtil;import br.com.topsys.util.TSUtil;import br.com.topsys.web.util.TSFacesUtil;@ViewScoped@SuppressWarnings("serial")@ManagedBean(name = "usuarioFaces")public final class UsuarioFaces extends CrudFaces<UsuarioModel> {	@EJB	private FuncaoBS funcaoBS;	@EJB	private OrigemBS origemBS;	@EJB	private UsuarioBS usuarioBS;	@EJB	private UsuarioFuncaoBS usuarioFuncaoBS;	@EJB	private ComboBS comboBS;	private List<SelectItem> comboOrigem;	private List<SelectItem> comboFuncao;	private List<SelectItem> comboSetor;	private List<SelectItem> comboEstado;	private List<SelectItem> comboCidade;	private List<SelectItem> comboBairro;	private List<SelectItem> comboSexo;	private UsuarioFuncaoModel usuarioFuncaoModel;	private FuncaoModel funcaoModel;	private OrigemModel origemModel;	private String senha;	private String confirmarSenha;	@Override	@PostConstruct	protected void clearFields() {		this.comboFuncao = super.initCombo(this.comboBS.pesquisarFuncoes(), "id", "descricao");		this.comboSetor = super.initCombo(this.comboBS.pesquisarSetores(), "id", "descricao");		this.comboEstado = super.initCombo(this.comboBS.pesquisarEstados(), "id", "sigla");		this.comboSexo = super.initCombo(this.comboBS.pesquisarSexo() , "id", "descricao");		this.crudModel = new UsuarioModel();		this.crudModel.setFlagAtivo(true);		this.crudModel.setUsuarioFuncoes(new ArrayList<UsuarioFuncaoModel>());		this.crudModel.setSetorModel(new SetorModel());		this.crudModel.setCidadeModel(new CidadeModel());		this.crudModel.getCidadeModel().setEstadoModel(new EstadoModel());		this.crudModel.setBairroModel(new BairroModel());		this.crudPesquisaModel = new UsuarioModel();		this.crudPesquisaModel.setFlagAtivo(true);		this.crudPesquisaModel.setUsuarioFuncoes(new ArrayList<UsuarioFuncaoModel>());		this.crudPesquisaModel.setOrigemModel(Utilitario.getOrigemAtual());		this.origemModel = new OrigemModel();		this.funcaoModel = new FuncaoModel();		this.funcaoModel.setFlagAtivo(Boolean.TRUE);	}	public void instanciarComboOrigem() {		this.comboOrigem = super.initCombo(this.origemBS.pesquisarPorFuncao(this.funcaoModel), "id", "descricao");	}	public void instanciarComboCidade() {		this.comboCidade = super.initCombo(this.comboBS.pesquisarCidades(this.crudModel.getCidadeModel().getEstadoModel()), "id", "descricaoCompleta");	}		public void instanciarComboBairro() {		this.comboBairro = super.initCombo(this.comboBS.pesquisarBairros(this.crudModel.getCidadeModel()), "id", "descricao");	}	public String addUsuarioFuncao() {		if (!this.validarFuncoes()) {			return null;		}		if (TSUtil.isEmpty(this.funcaoModel.getId())) {			super.addErrorMessage("Função: Campo obrigatório");			return null;		}		if (TSUtil.isEmpty(this.origemModel.getId())) {			super.addErrorMessage("Origem: Campo obrigatório");			return null;		}		UsuarioFuncaoModel usuarioFuncaoModel = new UsuarioFuncaoModel();		usuarioFuncaoModel.setUsuarioModel(this.crudModel);		usuarioFuncaoModel.setOrigemModel(this.origemBS.obterCrudModel(this.origemModel));		usuarioFuncaoModel.setFuncaoModel(this.funcaoBS.obterCrudModel(this.funcaoModel));		usuarioFuncaoModel.setFlagAtivo(Boolean.TRUE);		if (this.crudModel.getUsuarioFuncoes().contains(usuarioFuncaoModel)) {			super.addErrorMessage("Função já adicionada anteriormente");			return null;		}		this.crudModel.getUsuarioFuncoes().add(usuarioFuncaoModel);		return null;	}	@Override	protected void posDetail() {		if (!TSUtil.isEmpty(this.crudModel.getCidadeModel().getEstadoModel().getId())) {			this.instanciarComboCidade();		}	}	public String delUsuarioFuncao() {		if (!TSUtil.isEmpty(this.usuarioFuncaoModel.getId())) {			try {				this.usuarioFuncaoModel.setFlagAtivo(!this.usuarioFuncaoModel.getFlagAtivo());								this.usuarioFuncaoBS.alterarSituacao(this.usuarioFuncaoModel);				this.addInfoMessage("Operação realizada com sucesso!");			} catch (TSApplicationException ex) {				super.throwException(ex);			}		} else {						 this.crudModel.getUsuarioFuncoes().remove(this.usuarioFuncaoModel);		}		return null;	}	protected boolean validaCampos() {		boolean retorno = true;		if (!TSUtil.isEmpty(TSUtil.tratarString(this.crudModel.getCpf())) && !TSUtil.isValidCPF(TSUtil.removerNaoDigitos(this.crudModel.getCpf()))) {			TSFacesUtil.addErrorMessage("CPF: este valor é inválido.");			retorno = false;		}		if (this.crudModel.getFlagUsuario()) {			if (!alterar) {				if (TSUtil.isEmpty(this.getSenha())) {					TSFacesUtil.addErrorMessage("Senha: este valor é obrigatório.");					retorno = false;				}				if (TSUtil.isEmpty(this.getConfirmarSenha())) {					TSFacesUtil.addErrorMessage("Confirmar Senha: este valor é obrigatório.");					retorno = false;				}			}			if (TSUtil.isEmpty(this.crudModel.getLogin())) {				super.addErrorMessage("Login: Campo obrigatório");				retorno = false;			}			if (TSUtil.isEmpty(this.crudModel.getSetorModel().getId())) {				super.addErrorMessage("Setor: Campo obrigatório");				retorno = false;			}		}		if (!TSUtil.isEmpty(this.senha)) {			if (!this.senha.equals(this.confirmarSenha)) {				super.addErrorMessage("Os valores de senha e confirmar senha não conferem.");				return false;			}			String erro = Utilitario.validarSenha(this.senha);			if (!TSUtil.isEmpty(erro)) {				super.addErrorMessageKey(erro);				return false;			}		}		if (this.usuarioBS.isCpfExistente(this.crudModel)) {			super.addErrorMessage("Já existe outro usuário com esse cpf");			return false;		}		return retorno && this.validarFuncoes();	}	public boolean validarFuncoes() {		boolean retorno = true;		int posicao = 1;		for (UsuarioFuncaoModel model : this.crudModel.getUsuarioFuncoes()) {			if (TSUtil.isEmpty(model.getFuncaoModel()) || TSUtil.isEmpty(model.getFuncaoModel().getId())) {				super.addErrorMessage("Função " + posicao + "Campo obrigatório");				retorno = false;			}			if (TSUtil.isEmpty(model.getOrigemModel()) || TSUtil.isEmpty(model.getOrigemModel().getId())) {				super.addErrorMessage("Origem " + posicao + "Campo obrigatório");				retorno = false;			}		}		return retorno;	}	@Override	protected void prePersist() {		this.crudModel.setOrigemModel(Utilitario.getOrigemAtual());		if (!TSUtil.isEmpty(this.senha)) {			this.crudModel.setQtdTentativasLoginInvalido(0);			this.crudModel.setDataAlteracaoSenha(new Date());			this.crudModel.setSenha(TSCryptoUtil.gerarHash(this.senha, Constantes.CRIPTOGRAFIA_USUARIO));		}	}	@Override	protected void preDelete() {		this.crudModel.setOrigemModel(Utilitario.getOrigemAtual());		this.crudModel.setUsuarioAtualizacaoModel(Utilitario.getUsuarioLogado());	}	@Override	protected void posPersist() {		super.setAlterar(true);		super.setManterCampos(true);	}		@Override	protected void tratarClone() {				for (UsuarioFuncaoModel usuarioFuncaoModel : this.crudModel.getUsuarioFuncoes()) {			usuarioFuncaoModel.setId(null);			usuarioFuncaoModel.setUsuarioModel(this.crudModel);		}			}	@Override	protected CrudBS<UsuarioModel> getCrudBS() {		return this.usuarioBS;	}	public String getSenha() {		return senha;	}	public void setSenha(String senha) {		this.senha = senha;	}	public List<SelectItem> getComboFuncao() {		return comboFuncao;	}	public void setComboFuncao(List<SelectItem> comboFuncao) {		this.comboFuncao = comboFuncao;	}	public UsuarioFuncaoModel getUsuarioFuncaoModel() {		return usuarioFuncaoModel;	}	public void setUsuarioFuncaoModel(UsuarioFuncaoModel usuarioFuncaoModel) {		this.usuarioFuncaoModel = usuarioFuncaoModel;	}	public List<SelectItem> getComboOrigem() {		return comboOrigem;	}	public void setComboOrigem(List<SelectItem> comboOrigem) {		this.comboOrigem = comboOrigem;	}	public String getConfirmarSenha() {		return confirmarSenha;	}	public void setConfirmarSenha(String confirmarSenha) {		this.confirmarSenha = confirmarSenha;	}	public List<SelectItem> getComboSetor() {		return comboSetor;	}	public void setComboSetor(List<SelectItem> comboSetor) {		this.comboSetor = comboSetor;	}	public List<SelectItem> getComboEstado() {		return comboEstado;	}	public void setComboEstado(List<SelectItem> comboEstado) {		this.comboEstado = comboEstado;	}	public FuncaoModel getFuncaoModel() {		return funcaoModel;	}	public void setFuncaoModel(FuncaoModel funcaoModel) {		this.funcaoModel = funcaoModel;	}	public OrigemModel getOrigemModel() {		return origemModel;	}	public void setOrigemModel(OrigemModel origemModel) {		this.origemModel = origemModel;	}	public List<SelectItem> getComboCidade() {		return comboCidade;	}	public void setComboCidade(List<SelectItem> comboCidade) {		this.comboCidade = comboCidade;	}	public List<SelectItem> getComboSexo() {		return comboSexo;	}	public void setComboSexo(List<SelectItem> comboSexo) {		this.comboSexo = comboSexo;	}	public List<SelectItem> getComboBairro() {		return comboBairro;	}	public void setComboBairro(List<SelectItem> comboBairro) {		this.comboBairro = comboBairro;	}	}