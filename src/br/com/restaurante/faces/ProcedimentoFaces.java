package br.com.restaurante.faces;import java.util.ArrayList;import java.util.List;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.faces.bean.ManagedBean;import javax.faces.bean.ViewScoped;import javax.faces.model.SelectItem;import br.com.restaurante.business.ComboBS;import br.com.restaurante.business.CrudBS;import br.com.restaurante.business.ProcedimentoBS;import br.com.restaurante.business.QuizGrupoBS;import br.com.restaurante.business.QuizPerguntaBS;import br.com.restaurante.model.ProcedimentoModel;import br.com.restaurante.model.QuizPerguntaModel;import br.com.restaurante.model.QuizRespostaModel;import br.com.restaurante.util.Constantes;import br.com.topsys.util.TSUtil;@ViewScoped@SuppressWarnings("serial")@ManagedBean(name = "procedimentoFaces")public final class ProcedimentoFaces extends CrudFaces<ProcedimentoModel> {	@EJB	private ProcedimentoBS procedimentoBS;	@EJB	private ComboBS comboBS;	@EJB	private QuizPerguntaBS quizPerguntaBS;	@EJB	private QuizGrupoBS quizGrupoBS;	private List<SelectItem> comboProcedimentos;	private List<SelectItem> comboGrupoProcedimentoSubexame;	private List<SelectItem> comboSubexames;	private List<SelectItem> comboUnidadeMedida;	@Override	@PostConstruct	protected void clearFields() {		super.clearFields();		this.crudModel = new ProcedimentoModel();		this.crudModel.setFlagAtivo(Boolean.TRUE);		this.crudModel.setProcedimentoModel(new ProcedimentoModel());		this.crudModel.setPerguntas(new ArrayList<QuizPerguntaModel>());		this.crudPesquisaModel = new ProcedimentoModel();		this.crudPesquisaModel.setFlagAtivo(Boolean.TRUE);		this.crudPesquisaModel.setProcedimentoModel(new ProcedimentoModel());		this.carregarComboProcedimentos();		this.comboSubexames = super.initCombo(this.quizPerguntaBS.pesquisarSubexames(), "id", "apelido");		this.comboGrupoProcedimentoSubexame = super.initCombo(this.quizGrupoBS.pesquisarExames(), "id", "descricao");		this.comboUnidadeMedida = super.initCombo(this.comboBS.pesquisarUnidadesMedida(), "id", "descricao");	}		private void carregarComboProcedimentos(){		this.comboProcedimentos = super.initCombo(this.comboBS.pesquisarProcedimentos(this.crudModel), "id", "descricao");	}	public String addPergunta() {		QuizPerguntaModel quizPerguntaModel = QuizPerguntaModel.getInstanceCrudModel();		quizPerguntaModel.setProcedimentoModel(this.crudModel);		quizPerguntaModel.setOrdem(this.crudModel.getPerguntas().size() + 1);		this.crudModel.getPerguntas().add(quizPerguntaModel);		return null;	}	public String addObservacao() {		QuizPerguntaModel quizPerguntaModel = QuizPerguntaModel.getInstanceCrudModel();		quizPerguntaModel.setProcedimentoModel(this.crudModel);		quizPerguntaModel.setOrdem(this.crudModel.getPerguntas().size() + 1);		quizPerguntaModel.setApelido("Observação");		quizPerguntaModel.setFlagObservacao(true);		quizPerguntaModel.getTipoRespostaModel().setId(Constantes.TIPO_RESPOSTA_QUIZ_COMBO);		QuizRespostaModel resposta = new QuizRespostaModel("Repetido e confirmado");		resposta.setFlagDefault(true);		quizPerguntaModel.getRespostas().add(resposta);		this.crudModel.getPerguntas().add(quizPerguntaModel);		return null;	}		public String addResposta(QuizPerguntaModel pergunta) {		QuizRespostaModel resposta = new QuizRespostaModel(pergunta.getDescricaoRespostas());		resposta.setFlagDefault(false);		pergunta.getRespostas().add(resposta);		pergunta.setDescricaoRespostas(null);		return null;	}	public String addResposta(QuizPerguntaModel pergunta, Integer posicao) {		QuizRespostaModel resposta = new QuizRespostaModel(pergunta.getDescricaoRespostas());		resposta.setFlagDefault(false);		pergunta.getRespostas().add(posicao + 1, resposta);		pergunta.setDescricaoRespostas(null);		return null;	}	public String removePergunta(QuizPerguntaModel model) {		this.crudModel.getPerguntas().remove(model);		return null;	}	public String removerResposta(QuizPerguntaModel model, QuizRespostaModel resposta) {		model.getRespostas().remove(resposta);		return null;	}		@Override	protected void posDetail() {		this.tratarDetail();		this.carregarComboProcedimentos();	}		private void tratarDetail() {		if (!TSUtil.isEmpty(this.crudModel.getPerguntas())) {			for (QuizPerguntaModel pergunta : this.crudModel.getPerguntas()) {				if ("OBS".equalsIgnoreCase(pergunta.getCodigoSubexame())) {					pergunta.setFlagObservacao(true);				}				if (TSUtil.isEmpty(pergunta.getApelido())) {					pergunta.setApelido(pergunta.getPergunta());				}			}		}	}		@Override	protected void prePersist() {				if (!TSUtil.isEmpty(this.crudModel.getPerguntas())) {			for (QuizPerguntaModel pergunta : this.crudModel.getPerguntas()) {				pergunta.setPergunta(this.crudModel.getDescricao() + " - " + pergunta.getApelido());				if (pergunta.isFlagObservacao()) {					pergunta.setCodigoSubexame("OBS");				} else {					pergunta.setCodigoSubexame(null);				}			}		}			}		@Override	protected void tratarClone() {				for(QuizPerguntaModel pergunta : this.crudModel.getPerguntas()){						pergunta.setId(null);			pergunta.setProcedimentoModel(this.crudModel);					}			}	@Override	protected CrudBS<ProcedimentoModel> getCrudBS() {		return this.procedimentoBS;	}	public List<SelectItem> getComboProcedimentos() {		return comboProcedimentos;	}	public void setComboProcedimentos(List<SelectItem> comboProcedimentos) {		this.comboProcedimentos = comboProcedimentos;	}	public List<SelectItem> getComboGrupoProcedimentoSubexame() {		return comboGrupoProcedimentoSubexame;	}	public void setComboGrupoProcedimentoSubexame(List<SelectItem> comboGrupoProcedimentoSubexame) {		this.comboGrupoProcedimentoSubexame = comboGrupoProcedimentoSubexame;	}	public List<SelectItem> getComboSubexames() {		return comboSubexames;	}	public void setComboSubexames(List<SelectItem> comboSubexames) {		this.comboSubexames = comboSubexames;	}	public List<SelectItem> getComboUnidadeMedida() {		return comboUnidadeMedida;	}	public void setComboUnidadeMedida(List<SelectItem> comboUnidadeMedida) {		this.comboUnidadeMedida = comboUnidadeMedida;	}}