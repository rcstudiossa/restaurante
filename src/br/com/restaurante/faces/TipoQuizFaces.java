package br.com.restaurante.faces;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.faces.bean.ManagedBean;import javax.faces.bean.ViewScoped;import javax.faces.model.SelectItem;import org.primefaces.context.RequestContext;import br.com.restaurante.business.ComboBS;import br.com.restaurante.business.CrudBS;import br.com.restaurante.business.FuncaoBS;import br.com.restaurante.business.MedidaBS;import br.com.restaurante.business.QuizBS;import br.com.restaurante.business.QuizGrupoBS;import br.com.restaurante.business.QuizPerguntaBS;import br.com.restaurante.business.TipoQuizBS;import br.com.restaurante.business.UnidadeMedidaBS;import br.com.restaurante.business.ValidadorBS;import br.com.restaurante.model.FuncaoModel;import br.com.restaurante.model.MedidaModel;import br.com.restaurante.model.QuizGrupoModel;import br.com.restaurante.model.QuizModel;import br.com.restaurante.model.QuizPerguntaArquetipoModel;import br.com.restaurante.model.QuizPerguntaModel;import br.com.restaurante.model.QuizRespostaModel;import br.com.restaurante.model.QuizValidadorModel;import br.com.restaurante.model.TabModel;import br.com.restaurante.model.TipoQuizModel;import br.com.restaurante.model.TipoRespostaModel;import br.com.restaurante.model.ValidadorModel;import br.com.restaurante.util.Constantes;import br.com.restaurante.util.Utilitario;import br.com.topsys.exception.TSApplicationException;import br.com.topsys.exception.TSSystemException;import br.com.topsys.util.TSUtil;@ViewScoped@SuppressWarnings("serial")@ManagedBean(name = "tipoQuizFaces")public final class TipoQuizFaces extends CrudFaces<TipoQuizModel> {	@EJB	private TipoQuizBS tipoQuizBS;	@EJB	private QuizGrupoBS quizGrupoBS;	@EJB	private QuizPerguntaBS quizPerguntaBS;	@EJB	private QuizBS quizBS;	@EJB	private ComboBS comboBS;	@EJB	private FuncaoBS funcaoBS;	@EJB	private MedidaBS medidaBS;	@EJB	private ValidadorBS validadorBS;	@EJB	private UnidadeMedidaBS unidadeMedidaBS;	private List<SelectItem> comboQuizGrupo;	private List<SelectItem> comboPerguntas;	private List<SelectItem> comboPerguntasOutrosQuestionarios;	private List<SelectItem> comboRespostas;	private List<SelectItem> comboTiposQuiz;	private List<SelectItem> comboTabs;	private List<SelectItem> comboFuncoes;	private List<SelectItem> comboTipoResposta;	private List<SelectItem> comboMedidas;	private List<SelectItem> comboArquetipos;	private List<SelectItem> comboValidadores;	private QuizGrupoModel quizGrupoModel;	private QuizPerguntaModel quizPerguntaModel;	private QuizModel quizSelecionado;	private TipoQuizModel tipoQuizCopiaModel;	private QuizPerguntaArquetipoModel quizPerguntaArquetipoSelecionado;	private QuizRespostaModel respostaQuizModel;	private QuizValidadorModel quizValidadorModel;	private ValidadorModel validadorModel;	private String resposta;	private String percentualTela;	private List<QuizPerguntaModel> perguntas;	private String tituloTab;	@Override	@PostConstruct	protected void clearFields() {		super.clearFields();		this.crudModel = new TipoQuizModel();		this.crudModel.setQuiz(new ArrayList<QuizModel>());		this.crudModel.setTabModel(new TabModel());		this.crudModel.setFuncaoModel(new FuncaoModel());		this.crudModel.setTipoQuizPaiModel(new TipoQuizModel());		this.crudModel.setGrupos(new ArrayList<QuizGrupoModel>());		this.crudModel.setFlagAtivo(Boolean.TRUE);		this.quizSelecionado = new QuizModel();		this.quizSelecionado.setQuizDependenciaModel(new QuizModel());		this.quizSelecionado.setQuizRespostaDependenteModel(new QuizRespostaModel());		this.quizSelecionado.getQuizRespostaDependenteModel().setQuizPerguntaModel(new QuizPerguntaModel());		this.quizSelecionado.setQuizRespostaPadraoModel(new QuizModel());		this.quizSelecionado.getQuizRespostaPadraoModel().setTipoQuizModel(new TipoQuizModel());		this.crudPesquisaModel = new TipoQuizModel();		this.crudPesquisaModel.setTabModel(new TabModel());		this.crudPesquisaModel.setFuncaoModel(new FuncaoModel());		this.crudPesquisaModel.setFlagAtivo(Boolean.TRUE);		this.tipoQuizCopiaModel = new TipoQuizModel();		this.quizPerguntaModel = QuizPerguntaModel.getInstanceCrudModel();		this.quizGrupoModel = new QuizGrupoModel();		this.quizGrupoModel.setQuizPerguntaModel(QuizPerguntaModel.getInstanceCrudModel());		this.quizValidadorModel = new QuizValidadorModel();		this.validadorModel = new ValidadorModel();		this.comboTipoResposta = super.initCombo(this.comboBS.pesquisarTiposResposta(), "id", "descricao");		this.comboQuizGrupo = super.initCombo(this.quizGrupoBS.pesquisarCrudModel(new QuizGrupoModel(Boolean.TRUE)), "id", "descricao");		this.comboFuncoes = super.initCombo(this.funcaoBS.pesquisarCrudModel(new FuncaoModel()), "id", "descricao");		this.comboTabs = super.initCombo(this.comboBS.pesquisarTab(), "id", "descricao");		this.comboMedidas = super.initCombo(this.medidaBS.pesquisarCrudModel(new MedidaModel()), "id", "descricao");		this.comboArquetipos = super.initCombo(this.quizPerguntaBS.pesquisarCrudModel(new QuizPerguntaModel(new TipoRespostaModel(), Boolean.TRUE, Boolean.TRUE)), "id", "pergunta");		this.comboValidadores = super.initCombo(this.validadorBS.pesquisarCrudModel(new ValidadorModel()), "id", "descricao");		this.comboTiposQuiz = super.initCombo(this.tipoQuizBS.pesquisarCrudModel(this.crudPesquisaModel), "id", "descricao");		this.atualizarPerguntas();		this.percentualTela = "coluna70";		this.manterCampos = true;			}	public String atualizarPerguntas() {		this.perguntas = this.quizPerguntaBS.pesquisarSimples(new QuizPerguntaModel(new TipoRespostaModel(), true, false));		return null;	}	public String atualizarComboPerguntasPadrao() {		this.comboPerguntas = super.initCombo(this.quizBS.pesquisarSimples(this.quizSelecionado.getQuizRespostaPadraoModel().getTipoQuizModel()), "id", "descricaoCompleta");		return null;	}	public String addPergunta() {		if (TSUtil.isEmpty(this.quizPerguntaModel.getId())) {			super.addErrorMessage("Pergunta: Campo obrigatório");			return null;		}		QuizModel quiz = new QuizModel();		quiz.setQuizPerguntaModel(this.quizPerguntaModel);		if (!this.crudModel.getQuiz().contains(quiz)) {			quiz.setQuizDependenciaModel(new QuizModel());			quiz.setQuizGrupoModel(new QuizGrupoModel());			quiz.setQuizPerguntaModel(this.quizPerguntaBS.obterCrudModel(this.quizPerguntaModel));			quiz.setTipoQuizModel(this.crudModel);			quiz.setFlagAtivo(Boolean.TRUE);			quiz.setFlagCopia(Boolean.TRUE);			quiz.setCssDiv("coluna100");			quiz.setCssColunas("coluna100, coluna0");			quiz.setQtdColunas(2);			quiz.setQuizRespostaPadraoModel(new QuizModel());			quiz.getQuizRespostaPadraoModel().setTipoQuizModel(new TipoQuizModel());			quiz.setValidadores(new ArrayList<QuizValidadorModel>());			this.crudModel.getQuiz().add(quiz);			super.addInfoMessage("Pergunta adicionada com sucesso!");		} else {			super.addErrorMessage("Essa pergunta já foi adicionada anteriormente!");		}		return null;	}	public String addPerguntas() {		for (QuizPerguntaModel pergunta : this.perguntas) {			if (pergunta.isFlagSelecionado()) {				QuizModel quiz = new QuizModel();				quiz.setQuizPerguntaModel(pergunta);				if (!this.crudModel.getQuiz().contains(quiz)) {					quiz.setQuizDependenciaModel(new QuizModel());					quiz.setQuizGrupoModel(new QuizGrupoModel());					quiz.setTipoQuizModel(this.crudModel);					quiz.setFlagAtivo(Boolean.TRUE);					quiz.setFlagCopia(Boolean.TRUE);					quiz.setCssDiv("coluna100");					if (pergunta.getFlagOutros()) {						quiz.setCssColunas("coluna60, coluna40");					} else {						quiz.setCssColunas("coluna100, coluna0");					}					quiz.setQuizRespostaDependenteModel(new QuizRespostaModel());					quiz.getQuizRespostaDependenteModel().setQuizPerguntaModel(new QuizPerguntaModel());					quiz.setQtdColunas(2);					quiz.setQuizRespostaPadraoModel(new QuizModel());					quiz.getQuizRespostaPadraoModel().setTipoQuizModel(new TipoQuizModel());					quiz.setValidadores(new ArrayList<QuizValidadorModel>());					this.crudModel.getQuiz().add(quiz);				}				pergunta.setFlagSelecionado(false);			}		}		super.addInfoMessage("Operação realizada com sucesso");		return null;	}	@Override	protected void prePersist() {		List<QuizModel> quizRemovido = new ArrayList<QuizModel>();		for (QuizModel quiz : getCrudModel().getQuiz()) {			if (TSUtil.isEmpty(quiz.getId()) && !quiz.getFlagAtivo()) {				quizRemovido.add(quiz);			}		}		getCrudModel().getQuiz().removeAll(quizRemovido);	}	public String removeGrupo(QuizGrupoModel grupo) {		this.crudModel.getQuiz().removeAll(grupo.getQuizes());				grupo.getQuizes().clear();		this.tipoQuizBS.visualizarQuiz(this.crudModel);		return null;	}	public String removePergunta() {		try {			this.quizBS.excluir(this.quizSelecionado);			this.crudModel.getQuiz().remove(this.quizSelecionado);			this.tipoQuizBS.visualizarQuiz(this.crudModel);			super.addInfoMessageKey(Constantes.OPERACAO_SUCESSO);		} catch (TSApplicationException e) {			super.throwException(e);		}		return null;	}	@Override	protected void posDetail() {		this.tipoQuizBS.visualizarQuiz(this.crudModel);		this.comboPerguntas = super.initCombo(this.quizBS.pesquisarSimples(this.crudModel), "id", "descricaoCompleta");	}	@Override	protected void posUpdate() {		this.detail();	}	public String copiarQuiz() {		if (TSUtil.isEmpty(this.tipoQuizCopiaModel.getId())) {			super.addErrorMessage("Selecione o questionário que deseja copiar");			return null;		}		this.tipoQuizCopiaModel = this.tipoQuizBS.obterCrudModel(this.tipoQuizCopiaModel);		for (QuizModel quiz : this.tipoQuizCopiaModel.getQuiz()) {			quiz.setId(null);			quiz.setTipoQuizModel(this.crudModel);		}		this.crudModel.setQuiz(this.tipoQuizCopiaModel.getQuiz());		this.tipoQuizCopiaModel = new TipoQuizModel();		this.tipoQuizBS.visualizarQuiz(this.crudModel);		return null;	}	public String inserirGrupo() {		if (!TSUtil.isEmpty(this.quizGrupoModel.getDescricao())) {			try {				this.quizGrupoModel.setFlagAtivo(true);				this.quizGrupoModel.setOrdem(this.crudModel.getGrupos().size());				this.quizGrupoModel.setQuizes(new ArrayList<QuizModel>());				this.quizGrupoBS.inserirCrudModel(this.quizGrupoModel);				this.crudModel.getGrupos().add(this.quizGrupoModel);				this.quizGrupoModel = new QuizGrupoModel();				super.addInfoMessageKey(Constantes.OPERACAO_SUCESSO);			} catch (TSApplicationException e) {				super.throwException(e);				return null;			} catch (TSSystemException e) {				super.addErrorMessage("Ocorreu um erro ao adicionar o grupo");				e.printStackTrace();				return null;			}		}		return null;	}	public String alterarGrupo() {		if (!TSUtil.isEmpty(this.quizGrupoModel.getDescricao())) {			try {				this.quizGrupoBS.alterarCrudModel(this.quizGrupoModel);				this.quizGrupoModel = new QuizGrupoModel();				super.addInfoMessageKey(Constantes.OPERACAO_SUCESSO);			} catch (TSApplicationException e) {				super.throwException(e);				return null;			} catch (TSSystemException e) {				super.addErrorMessage("Ocorreu um erro ao adicionar o grupo");				e.printStackTrace();				return null;			}		}		return null;	}	public String addValidador() {		if (TSUtil.isEmpty(this.validadorModel.getId())) {			super.addErrorMessage("Selecione o validador");			return null;		}		this.quizValidadorModel.setValidadorModel(this.validadorBS.obterCrudModel(this.validadorModel));		this.quizValidadorModel.setQuizModel(this.quizSelecionado);		if (this.quizSelecionado.getValidadores().contains(this.quizValidadorModel)) {			super.addErrorMessage("Validador já foi adicionado anteriormente");			return null;		}		this.quizSelecionado.getValidadores().add(this.quizValidadorModel);		this.quizValidadorModel = new QuizValidadorModel();		super.addInfoMessageKey(Constantes.OPERACAO_SUCESSO);		return null;	}	public String removeValidador() {		try {			this.quizBS.excluirValidador(this.quizValidadorModel);			this.quizSelecionado.getValidadores().remove(this.quizValidadorModel);			super.addInfoMessageKey(Constantes.OPERACAO_SUCESSO);		} catch (TSApplicationException e) {			super.throwException(e);		}		return null;	}	public String addPergunta(QuizGrupoModel quizGrupoModel) {		if (TSUtil.isEmpty(quizGrupoModel.getQuizPerguntaModel()) || TSUtil.isEmpty(quizGrupoModel.getQuizPerguntaModel().getId())) {			super.addErrorMessage("Selecione a pergunta");			return null;		}		QuizModel quiz = new QuizModel();		quiz.setQuizPerguntaModel(quizGrupoModel.getQuizPerguntaModel());		quiz.setApelido(quizGrupoModel.getQuizPerguntaModel().getNomePerguntaSimples());		quiz.setQuizDependenciaModel(new QuizModel());		quiz.setQuizGrupoModel(quizGrupoModel);		quiz.setTipoQuizModel(this.crudModel);		quiz.setFlagAtivo(Boolean.TRUE);		quiz.setFlagCopia(Boolean.TRUE);		quiz.setCssDiv("coluna100");		quiz.setCssColunas("coluna100, coluna0");		quiz.setQuizRespostaDependenteModel(new QuizRespostaModel());		quiz.getQuizRespostaDependenteModel().setQuizPerguntaModel(new QuizPerguntaModel());		quiz.setQtdColunas(2);		quiz.setQuizRespostaPadraoModel(new QuizModel());		quiz.getQuizRespostaPadraoModel().setTipoQuizModel(new TipoQuizModel());		quiz.setOrdem(quizGrupoModel.getQuizes().size() * 3);		quiz.setRows(quizGrupoModel.getQuizPerguntaModel().getRows());		quiz.setMaxlength(quizGrupoModel.getQuizPerguntaModel().getMaxlenght());		quiz.setFlagOutros(quizGrupoModel.getQuizPerguntaModel().getFlagOutros());		quiz.setValidadores(new ArrayList<QuizValidadorModel>());		this.crudModel.getQuiz().add(quiz);		this.tipoQuizBS.visualizarQuiz(this.crudModel);		quizGrupoModel.setQuizPerguntaModel(QuizPerguntaModel.getInstanceCrudModel());		return null;	}	public String iniciarPergunta(QuizGrupoModel quizGrupoModel) {		this.quizGrupoModel = quizGrupoModel;		quizGrupoModel.setQuizPerguntaModel(QuizPerguntaModel.getInstanceCrudModel());		return null;	}	public String inserirPergunta() {		if ((this.quizGrupoModel.getQuizPerguntaModel().isCombo() || this.quizGrupoModel.getQuizPerguntaModel().isMultiplo() || this.quizGrupoModel.getQuizPerguntaModel().isRadio()) && TSUtil.isEmpty(this.quizGrupoModel.getQuizPerguntaModel().getRespostas())) {			this.addErrorMessage("Para este tipo de pergunta é necessário adicionar algumas respostas");			return null;		}		try {			this.quizGrupoModel.getQuizPerguntaModel().setUsuarioCadastroModel(Utilitario.getUsuarioLogado());			this.quizGrupoModel.getQuizPerguntaModel().setDataCadastro(new Date());			this.quizPerguntaBS.inserirCrudModel(this.quizGrupoModel.getQuizPerguntaModel());			this.addPergunta(this.quizGrupoModel);			RequestContext.getCurrentInstance().addCallbackParam("valido", true);			super.addInfoMessageKey(Constantes.OPERACAO_SUCESSO);		} catch (TSApplicationException e) {			super.throwException(e);		} catch (TSSystemException e) {			e.printStackTrace();			super.addErrorMessageKey("ERRO_INESPERADO");		}		this.quizGrupoModel = new QuizGrupoModel();		return null;	}	public String addResposta() {		this.quizGrupoModel.getQuizPerguntaModel().getRespostas().add(new QuizRespostaModel(this.resposta));		this.resposta = null;		return null;	}	public String removerResposta() {		this.quizGrupoModel.getQuizPerguntaModel().getRespostas().remove(this.respostaQuizModel);		return null;	}	public String addArquetipo() {		if (TSUtil.isEmpty(this.quizPerguntaModel.getId())) {			super.addErrorMessage("Selecione o arquétipo");			return null;		}		QuizPerguntaArquetipoModel arquetipoModel = new QuizPerguntaArquetipoModel();		arquetipoModel.setQuizPerguntaModel(this.quizGrupoModel.getQuizPerguntaModel());		arquetipoModel.setArquetipoModel(this.quizPerguntaBS.obterSimples(this.quizPerguntaModel));		arquetipoModel.setOrdem(this.quizGrupoModel.getQuizPerguntaModel().getArquetipos().size());		if (this.quizGrupoModel.getQuizPerguntaModel().getArquetipos().contains(arquetipoModel)) {			super.addErrorMessage("Arquétipo já adicionado anterioriomente");			return null;		}		this.quizGrupoModel.getQuizPerguntaModel().getArquetipos().add(arquetipoModel);		return null;	}	public String removeArquetipo() {		if (!TSUtil.isEmpty(this.quizPerguntaArquetipoSelecionado.getId())) {			try {				this.quizPerguntaBS.excluir(this.quizPerguntaArquetipoSelecionado);				this.quizGrupoModel.getQuizPerguntaModel().getArquetipos().remove(this.quizPerguntaArquetipoSelecionado);				super.addInfoMessage("Operação realizada com sucesso");			} catch (TSApplicationException e) {				super.throwException(e);			}		} else {			this.quizGrupoModel.getQuizPerguntaModel().getArquetipos().remove(this.quizPerguntaArquetipoSelecionado);		}		return null;	}		public String atualizarComboRespostasDependentes() {		this.comboRespostas = super.initCombo(this.quizPerguntaBS.pesquisarRespostas(this.quizSelecionado.getQuizDependenciaModel()), "id", "resposta");		return null;	}	public List<QuizPerguntaModel> buscaPergunta(String query) {		return this.quizPerguntaBS.pesquisarAutocomplete(query);	}		@Override	protected void tratarClone() {				for(QuizModel quiz : this.crudModel.getQuiz()){						quiz.setId(null);			quiz.setTipoQuizModel(this.crudModel);					}			}	@Override	protected CrudBS<TipoQuizModel> getCrudBS() {		return this.tipoQuizBS;	}	public List<SelectItem> getComboQuizGrupo() {		return comboQuizGrupo;	}	public void setComboQuizGrupo(List<SelectItem> comboQuizGrupo) {		this.comboQuizGrupo = comboQuizGrupo;	}	public List<SelectItem> getComboPerguntas() {		return comboPerguntas;	}	public void setComboPerguntas(List<SelectItem> comboPerguntas) {		this.comboPerguntas = comboPerguntas;	}	public QuizPerguntaModel getQuizPerguntaModel() {		return quizPerguntaModel;	}	public void setQuizPerguntaModel(QuizPerguntaModel quizPerguntaModel) {		this.quizPerguntaModel = quizPerguntaModel;	}	public QuizModel getQuizSelecionado() {		return quizSelecionado;	}	public void setQuizSelecionado(QuizModel quizSelecionado) {		this.quizSelecionado = quizSelecionado;	}	public String getPercentualTela() {		return percentualTela;	}	public void setPercentualTela(String percentualTela) {		this.percentualTela = percentualTela;	}	public List<QuizPerguntaModel> getPerguntas() {		return perguntas;	}	public void setPerguntas(List<QuizPerguntaModel> perguntas) {		this.perguntas = perguntas;	}	public List<SelectItem> getComboRespostas() {		return comboRespostas;	}	public void setComboRespostas(List<SelectItem> comboRespostas) {		this.comboRespostas = comboRespostas;	}	public List<SelectItem> getComboTiposQuiz() {		return comboTiposQuiz;	}	public void setComboTiposQuiz(List<SelectItem> comboTiposQuiz) {		this.comboTiposQuiz = comboTiposQuiz;	}	public String getTituloTab() {		return tituloTab;	}	public void setTituloTab(String tituloTab) {		this.tituloTab = tituloTab;	}	public List<SelectItem> getComboTabs() {		return comboTabs;	}	public void setComboTabs(List<SelectItem> comboTabs) {		this.comboTabs = comboTabs;	}	public List<SelectItem> getComboFuncoes() {		return comboFuncoes;	}	public void setComboFuncoes(List<SelectItem> comboFuncoes) {		this.comboFuncoes = comboFuncoes;	}	public TipoQuizModel getTipoQuizCopiaModel() {		return tipoQuizCopiaModel;	}	public void setTipoQuizCopiaModel(TipoQuizModel tipoQuizCopiaModel) {		this.tipoQuizCopiaModel = tipoQuizCopiaModel;	}	public QuizGrupoModel getQuizGrupoModel() {		return quizGrupoModel;	}	public void setQuizGrupoModel(QuizGrupoModel quizGrupoModel) {		this.quizGrupoModel = quizGrupoModel;	}	public List<SelectItem> getComboTipoResposta() {		return comboTipoResposta;	}	public void setComboTipoResposta(List<SelectItem> comboTipoResposta) {		this.comboTipoResposta = comboTipoResposta;	}	public List<SelectItem> getComboMedidas() {		return comboMedidas;	}	public void setComboMedidas(List<SelectItem> comboMedidas) {		this.comboMedidas = comboMedidas;	}	public List<SelectItem> getComboArquetipos() {		return comboArquetipos;	}	public void setComboArquetipos(List<SelectItem> comboArquetipos) {		this.comboArquetipos = comboArquetipos;	}	public QuizPerguntaArquetipoModel getQuizPerguntaArquetipoSelecionado() {		return quizPerguntaArquetipoSelecionado;	}	public void setQuizPerguntaArquetipoSelecionado(QuizPerguntaArquetipoModel quizPerguntaArquetipoSelecionado) {		this.quizPerguntaArquetipoSelecionado = quizPerguntaArquetipoSelecionado;	}	public QuizRespostaModel getRespostaQuizModel() {		return respostaQuizModel;	}	public void setRespostaQuizModel(QuizRespostaModel respostaQuizModel) {		this.respostaQuizModel = respostaQuizModel;	}	public List<SelectItem> getComboValidadores() {		return comboValidadores;	}	public void setComboValidadores(List<SelectItem> comboValidadores) {		this.comboValidadores = comboValidadores;	}	public QuizValidadorModel getQuizValidadorModel() {		return quizValidadorModel;	}	public void setQuizValidadorModel(QuizValidadorModel quizValidadorModel) {		this.quizValidadorModel = quizValidadorModel;	}	public ValidadorModel getValidadorModel() {		return validadorModel;	}	public void setValidadorModel(ValidadorModel validadorModel) {		this.validadorModel = validadorModel;	}	public String getResposta() {		return resposta;	}	public void setResposta(String resposta) {		this.resposta = resposta;	}	public List<SelectItem> getComboPerguntasOutrosQuestionarios() {		return comboPerguntasOutrosQuestionarios;	}	public void setComboPerguntasOutrosQuestionarios(List<SelectItem> comboPerguntasOutrosQuestionarios) {		this.comboPerguntasOutrosQuestionarios = comboPerguntasOutrosQuestionarios;	}}