package br.com.restaurante.faces;import java.util.Date;import java.util.List;import javax.annotation.PostConstruct;import javax.ejb.EJB;import javax.faces.bean.ManagedBean;import javax.faces.bean.SessionScoped;import br.com.restaurante.business.ConfiguracaoBS;import br.com.restaurante.business.MenuBS;import br.com.restaurante.business.UsuarioBS;import br.com.restaurante.model.ConfiguracaoModel;import br.com.restaurante.model.MenuModel;import br.com.restaurante.model.OrigemModel;import br.com.restaurante.model.TipoConfiguracaoModel;import br.com.restaurante.model.UsuarioModel;import br.com.restaurante.util.Constantes;import br.com.restaurante.util.Utilitario;import br.com.topsys.util.TSDateUtil;import br.com.topsys.util.TSParseUtil;import br.com.topsys.util.TSUtil;import br.com.topsys.web.faces.TSMainFaces;import br.com.topsys.web.util.TSFacesUtil;@SuppressWarnings("serial")@SessionScoped@ManagedBean(name = "menuFaces")public final class MenuFaces extends TSMainFaces {	@EJB	private MenuBS menuBS;	@EJB	private UsuarioBS usuarioBS;		@EJB	private ConfiguracaoBS configuracaoBS;		private String nomeTela;	private String tela;	private MenuModel menuModel;	private List<MenuModel> menus;	private ConfiguracaoModel configuracaoModel;		private int minutosInatividadeSessao;		@PostConstruct	protected void clearFields() {		if(TSUtil.isEmpty(Utilitario.getOrigemAtual())){						TSFacesUtil.getRequest().getSession().invalidate();			return;					}		ConfiguracaoModel config = this.configuracaoBS.obter(new TipoConfiguracaoModel(Constantes.TIPO_CONFIGURACAO_PERIODO_MAXIMO_INATIVIDADE_SESSAO), Utilitario.getOrigemAtual());				this.minutosInatividadeSessao = Integer.valueOf(config.getValor());				setNomeTela("Área de Trabalho");		this.menuModel = new MenuModel();		this.menuModel.setDescricao("Área de Trabalho");		UsuarioModel usuarioLogado = Utilitario.getUsuarioLogado();				this.configuracaoModel = this.configuracaoBS.obter(new TipoConfiguracaoModel(Constantes.TIPO_CONFIGURACAO_PERIODO_MAXIMO_INATIVIDADE_SESSAO), Utilitario.getOrigemAtual());		if (usuarioLogado.getFlagAdministrador()) {			this.menus = this.menuBS.pesquisarMenusADM(this.menuModel);			this.pesquisarMenusFilhosADM(this.menus);		} else {			OrigemModel origem = Utilitario.getOrigemAtual();			this.menus = this.menuBS.pesquisarMenuRaiz(usuarioLogado, origem);			this.pesquisarMenusFilhos(this.menus, usuarioLogado, origem);		}		this.carregarMenuInicial(Utilitario.getUsuarioLogado());				TSFacesUtil.addObjectInSession("arquivoImpressao", "0.pdf");			}		public String carregarMenuInicial(UsuarioModel usuarioLogado){				if (!TSUtil.isEmpty(usuarioLogado.getUsuarioFuncaoModel())) {			MenuModel menu = usuarioLogado.getUsuarioFuncaoModel().getFuncaoModel().getMenuInicial();			menu = obterMenu(this.menus, menu);			if (!TSUtil.isEmpty(menu)) {				this.menuModel = menu;				this.redirecionar();			}		}				return SUCESSO;			}		public void getAtivacao() {							}	private MenuModel obterMenu(List<MenuModel> menus, MenuModel menuProcurado) {		if (menus.contains(menuProcurado)) {			return menus.get(menus.indexOf(menuProcurado));		} else {			for (MenuModel menu : menus) {				MenuModel menuModel = obterMenu(menu.getSubMenus(), menuProcurado);				if (!TSUtil.isEmpty(menuModel)) {					return menuModel;				}			}		}		return null;	}	public void pesquisarMenusFilhosADM(List<MenuModel> menus) {		for (MenuModel model : menus) {			model.setSubMenus(this.menuBS.pesquisarMenusADM(model));			if (!TSUtil.isEmpty(model.getSubMenus())) {				this.pesquisarMenusFilhosADM(model.getSubMenus());			}		}	}	public void pesquisarMenusFilhos(List<MenuModel> menus, UsuarioModel usuario, OrigemModel origem) {		for (MenuModel model : menus) {			model.setSubMenus(this.menuBS.pesquisarMenuFilho(model, usuario, origem));			if (!TSUtil.isEmpty(model.getSubMenus())) {				this.pesquisarMenusFilhos(model.getSubMenus(), usuario, origem);			}		}	}	public String redirecionar() {		if (!TSUtil.isEmpty(this.menuModel.getManagedBean())) {			TSFacesUtil.removeManagedBeanInSession(this.menuModel.getManagedBean());		}		setTela(this.menuModel.getUrl());		setNomeTela("Área de Trabalho > " + (!TSUtil.isEmpty(menuModel.getMenuModel().getDescricao()) ? menuModel.getMenuModel().getDescricao() + " > " : "")  + menuModel.getDescricao());		return SUCESSO;	}	private MenuModel obterMenu(MenuModel menuModel, List<MenuModel> menus) {		for (MenuModel model : menus) {			if (model.equals(menuModel)) {				return model;			} else if (!TSUtil.isEmpty(model.getSubMenus())) {				MenuModel temp = this.obterMenu(menuModel, model.getSubMenus());				if (!TSUtil.isEmpty(temp)) {					return temp;				}			}		}		return null;	}	public String escolherMenu(MenuModel model) {		MenuModel menu = this.obterMenu(model, this.menus);		if (!TSUtil.isEmpty(menu)) {			this.menuModel = menu;			return redirecionar();		}		return null;	}		public String redirecionarFuncionario() {		MenuModel model = new MenuModel();		model.setId(Constantes.MENU_FUNCIONARIO);		return escolherMenu(model);	}	public Integer getTempoInatividade() {		return new Integer(this.configuracaoModel.getValor()) * 60 * 1000;	}	private String deslogar() {				if (!TSUtil.isEmpty(TSFacesUtil.getRequest()) && !TSUtil.isEmpty(TSFacesUtil.getRequest().getSession())) {			TSFacesUtil.getRequest().getSession().invalidate();		}				return "/pages/login.xhtml?faces-redirect=true";	}		public String logout() {		return this.deslogar();	}		public String logoutSessaoExpirada() {		return this.deslogar();	}		public boolean isTelaFuncionario() {		return Constantes.MENU_FUNCIONARIO.equals(this.menuModel.getId());	}	public String lerAviso() {		Utilitario.getUsuarioLogado().setLeuAviso(Boolean.TRUE);		return null;	}	public String getDataHoraAtual() {		return TSParseUtil.dateToString(new Date(), TSDateUtil.HH_MM);	}		public int getMinutosInatividadeSessao(){		return this.minutosInatividadeSessao; 	}	public String getNomeTela() {		return nomeTela;	}	public void setNomeTela(String nomeTela) {		this.nomeTela = nomeTela;	}	public String getTela() {		return tela;	}	public void setTela(String tela) {		this.tela = tela;	}	public MenuModel getMenuModel() {		return menuModel;	}	public void setMenuModel(MenuModel menuModel) {		this.menuModel = menuModel;	}		public String getPdfInicial(){		String url = TSFacesUtil.getRequest().getRequestURL().toString(); 		return url.split("/smpep/")[0] + "/smpep/0.pdf";	}	public List<MenuModel> getMenus() {		return menus;	}	public void setMenus(List<MenuModel> menus) {		this.menus = menus;	}}